import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt


print("TensorFlow version :- ",tf.__version__)

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('acc')>0.999):
      print("\nReached 99% accuracy so cancelling training!")
      self.model.stop_training = True

callbacks = myCallback()




mnist=tf.keras.datasets.mnist

(training_images, training_labels), (test_images, test_labels)=mnist.load_data()

plt.imshow(training_images[0],cmap='gray_r')
training_images=training_images.reshape(60000, 28, 28, 1)
training_images=training_images / 255.0
test_images = test_images.reshape(10000, 28, 28, 1)
test_images=test_images/255.0

model=  tf.keras.models.Sequential([
  tf.keras.layers.Conv2D(64,(3,3),activation='relu',input_shape=(28,28,1)),
  tf.keras.layers.MaxPooling2D(2,2),
  tf.keras.layers.Flatten(),
  tf.keras.layers.Dense(1280, activation='relu'),
  tf.keras.layers.Dense(10, activation='softmax')])

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

model.summary()
print("Training the model....")
model.fit(training_images,training_labels, epochs=10, callbacks=[callbacks])



print("\nTesting the model...")
model.evaluate(test_images,test_labels)

classifications = model.predict(test_images)

print("\n\nClassification :- \n",classifications[0])
print("\n\nThe test label is :- ",test_labels[0])



print("\n\nClassification :- \n",classifications[0])
